<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <ModulePrefs title="persistent data">
        <Require feature="opensocial-0.8"/>
    </ModulePrefs>
    <Content type="html">
    <![CDATA[
        <div id="input">
            <FORM>
                var1: <INPUT TYPE="text" name="url"/><br/>
                <INPUT TYPE="button" value="save" onclick="update( this.form )"/><br/>
                <INPUT TYPE="button" value="clear" onclick="clear_pd( this.form )"/>
            </FORM>
        </div>
        <h3>fetched persistent data:</h3>
        <div id="output"></div>
        <script type="text/javascript">
            var out = document.getElementById( 'output' );
            function update( form ) {
              update_viewer_store("url",form.url.value,update_callback)
            };
            function update_viewer_store ( key, value, callbk ) {
              var req = opensocial.newDataRequest();
              if ( window.mixi && mixi.newDataRequest ) req = mixi.newDataRequest();
              var viewer = opensocial.IdSpec.PersonId.VIEWER;
              var REQID_DATA = 'data1';
              req.add( req.newUpdatePersonAppDataRequest( viewer, key, value ), REQID_DATA );
              req.send( callbk );
            }
            function update_callback( res ) {
                if( res.hadError() ){
                    out.innerHTML = res.getErrorMessage();
                    return;
                }
                out.innerHTML = '<b>update success</b><br/>'; 
                fetch();
            };
            //データの取り出し
            function fetch_viewer_store ( key, callok, callng ) {
              var req = opensocial.newDataRequest();
              if ( window.mixi && mixi.newDataRequest ) req = mixi.newDataRequest();
              // ユーザID
              var p = {};
              var viewer = opensocial.IdSpec.PersonId.VIEWER;
              var uidkey = opensocial.IdSpec.Field.USER_ID;
              p[uidkey] = viewer;
              var ispc = opensocial.newIdSpec( p );
              // リクエスト毎の識別子を付ける
              var REQID_USER = 'user1';
              var REQID_DATA = 'data1';
              req.add( req.newFetchPersonRequest( viewer ), REQID_USER );
              req.add( req.newFetchPersonAppDataRequest( ispc, [key] ), REQID_DATA );
              if ( ! callng ) callng = function() {};
              var func = function ( res ) {
                // viewerのユーザIDを取り出す
                // var viewid = res.get(REQID_USER).getData().getId();
                if ( ! res ) return callng( res );
                var u1 = res.get(REQID_USER);
                if ( ! u1 ) return callng( res );
                var u2 = u1.getData();
                //console.log(u2);
                if ( ! u2 ) return callng( res );
                var viewid = u2.getId();
                if ( ! viewid ) return callng( res );
                // ユーザIDとキーを指定してデータを取り出す
                // var value = (res.get(REQID_DATA).getData())[viewid][key];
                var d1 = res.get(REQID_DATA);
                //console.log(d1);
                if ( ! d1 ) return callng( res );
                var d2 = d1.getData();
                if ( ! d2 ) return callng( res );
                var d3 = d2[viewid];
                if ( ! d3 && d2[key] ) d3 = d2; // bug?
                if ( ! d3 ) return callng( res );
                console.log(d3);
                var value = d3[key];
                // 成功時は値を引数にしてOKコールバック関数を呼ぶ
                if ( callok ) callok( value );
              };
              req.send( func );
            }
            function fetch() {
                fetch_viewer_store("url",fetch_callback);
            };
            function fetch_callback( val ) {
                console.log(val);
                if( !val ){
                    out.innerHTML = 'persistent data is empty.';
                    return;
                }
                out.innerHTML = '<ul>'
                    + '<li>' + val + '</li>'
                    + '</ul>';
            };
            function clear_pd() {
                var req = mixi.newDataRequest();
                req.add( req.newRemovePersonAppDataRequest( opensocial.IdSpec.PersonId.VIEWER, ["url"] ), "clear_data" );
                req.send( clear_callback );
            };
            function clear_callback( res ) {
                if( res.hadError() ){
                    out.innerHTML = res.getErrorMessage();
                    return;
                }
                out.innerHTML = '<b>clear success</b><br/>'; 
                fetch();
            };
            gadgets.util.registerOnLoadHandler( fetch );
        </script>
    ]]>
    </Content>
</Module>
